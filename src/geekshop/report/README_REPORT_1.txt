ОТЧЕТ О ПРОВЕДЕНИИ ОПТИМИЗАЦИИ ЗАПРОСОВ К БАЗЕ ДАННЫХ
------------------------------------------------------

При помощи Djago-debug-toolbar получены следующие сведения о работе сайта (развернутого на облачный сервер 31.31.201.195)

SQL queries для одного соединения:

Страница              время, ms  Кол-во запросов   Кол-во дублей

Главная                   7.50   14                  8
Продукты                  8.18   20                 14
Контакты                  5.50    9                  5  
Корзина                   6.91   13                 10 
Админка пользователи      4.11    4                  0
Админка категории         4.97    4                  0
Список заказов            4.28    4                  0
Просмотр деталей заказа   7,35    7                  3
Редактирование заказа    13.69   33                 26
Удаление заказа           6.21    6                  2


Из приведенных данных видно, что наиболее ресурсоемкие страницы с большим количеством дублей (в порядке убывания) страница редактирования заказов, страница продукты, страница корзины, главная страница.


ДЕТАЛИ ПРОВЕДННОЙ ОПТИМИЗАЦИИ
--------------------------------
Страница Главная
    добавил  select_related('category') в def main mainapp/views.py
    добавил select_related('user') в в def total_quantity в basketapp/models.py
    добавил select_related('product') в def total_cost в basketapp/models.py
    добавил select_related('user__shopuserprofile')в def basket в context_processors.py

В результате работы со страницей количество запросов снизилось до 7, дублей до 0.
Well done!


Страница Продукты
    добавил select_related('category') в def get_hot_product mainapp/views.py
    добавил select_related('category') в def get_same_product mainapp/views.py
    добавил select_related('category') d def products mainapp/views.py

В результате работы со страницей количество запросов снизилось до 9, дублей до 2.
Не нашел возможность устранить последний дубль.

Страница Корзина
    добавил select_related('user') в def basket basketapp/views.py
    на этапе работы с главной страницей ранее добавлен select_related('product') в 
        def total_cost basketapp/models.py

В результате работы со страницей количество запросов снизилось до 8, дублей 0
Well done!


Страница Редактирование заказа
    добавил select_related('category') в def get_items в mainapp/models.py
    добавил select_related('order') в def get_total_quantity в ordersapp/models.py
    добавил select_related('product') в def get_product_type_quantity в ordersapp/models.py
    добавил select_related('product') в def get_total_cost в ordersapp/models.py

В результате работы со странице количество запросов снизилось до 7 дубликатов до 4
(одинаковые, в данном случае по количеству форм)
Не нашел возможность устранить последний дубль.

РЕЗУЛЬТАТЫ
---------------------

В результате работы с django-debug-toolbar и использования метода select_related
удалось достичь следующих результатов:

Страница              время, ms     Кол-во запросов   Кол-во дублей

Главная                 7.50 --> 7.21   14 --> 7          8 --> 0
Продукты                8.18 --> 6.94   20 --> 9         14 --> 2
Контакты                5.50 --> 5.81    9 --> 6          5 --> 0  
Корзина                 6.91 --> 6.37   13 --> 10        10 --> 2 
Админка пользователи    4.11             4                0
Админка категории       4.97             4                0
Список заказов          4.28             4                0
Просмотр деталей заказа 7.35 --> 6.87    7                3 --> 0
Редактирование заказа  13.69 --> 8.62   33 --> 12        26 --> 4
Удаление заказа         6.21 --> 5.51    6 --> 6          2 --> 0

Суммарно для всех страниц время обработки сократилось на -8.01 ms,
количество дублей запросов к базе данных уменьшилось с 68 до 8.


ВЫВОДЫ
--------
В результаты работы освоены методы работы с инструментом django-debug-toolbar
("...and now I have mashinegun! ho-ho-ho..." J.McClain 1988 :)
Изучены возможности оптимизации сайта для работы с базой данных.

