Отчет
о проведении оптимизации проекта сайта geekshop
путем использования методов кеширования,
примененных на разных уровнях проекта.


Кэширование при вычислении полей в моделях.
-------------------------------------------------------------------------
Применено к методам модели Basket



Кэширование в шаблонах (использование тэга with)
-------------------------------------------------------------------------
Применено в модели Order, создан метод объединяющий
вычисления общего количества и общей цены для позиций
в заказе, зате данный метод вызван в шаблоне с помощью
тэга with.



Кэширование с помощью Memcached
-------------------------------------------------------------------------
Загружена на сервер, добавлена в виртуальное окружение
и настройки проекта библиотека Memcached.
В последующем поэтапно реализовано кэширование на
следующих уровнях:
- низкоуровневое кэширование
- кэширование в шаблонах
- кэширование контроллеров
- кэширование сайта.

Проведено нагрузночное тестирование с помощью siege
оценивались результаты полученные в Django Debug Toolbar

Столкнулся с трудностями последовательной эмпирической
оценки данных на облачном сервере, так как при загрузке
из репозитория в ветке уже были написаны все уровни кэширования
за исключением кэширования сайта.
Какой из них дал больший прирост производительности
уже было затруднительно сказать.
Запустил siege получил следующие параметры:

(env) root@31-31-201-195:/home/django/django-start-v2/src/geekshop/mainapp/templates/mainapp# siege -i -f /home/django/django-start-v2/src/geekshop/siege_test/geekshop_urls_combat.txt -d0 -r17 -c125
** SIEGE 4.0.4
** Preparing 125 concurrent users for battle.
The server is now under siege...^C
Lifting the server siege...
Transactions:		        3179 hits
Availability:		       99.78 %
Elapsed time:		       48.53 secs
Data transferred:	      113.58 MB
Response time:		        1.66 secs
Transaction rate:	       65.51 trans/sec
Throughput:		        2.34 MB/sec
Concurrency:		      108.68
Successful transactions:        3230
Failed transactions:	           7
Longest transaction:	       14.38
Shortest transaction:	        0.00
( Прим. 7 ошибочных транзакций - попытки изолированного перехода
на http://31.31.201.195:80/order/product/1/price/, к которому
привязана функция get_product_price. Она на входе ожидает
if request.is_ajax(), а без него не работает).

В итоге было решено воздержаться  от правок кода на боевом сервере.
Проводил оценку эффективности в процессе написания кода на
рабочем компьютре на тестовом сервере.

При этом наиболее заметное и эффективное ускорение работы было
отмечено при кэшировании контроллеров.
Причем, ускорение работы стало заметно даже визуально.

В процессе работы обнаружил и устранил несколько "багов",
которые образовались в основной из-за допущенных ранее
ошибок в разных местах проекта. Сделал соответствующие
выводы, все поправил.
Думаю они не заслуживают дополнительного описания,
но конечно их поиск и самостоятельное исправление
добавляет опыта в копилку.
К настоящему моменту на сайте все работает адекватно.


